import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";

const savedCart = localStorage.getItem("cart");

export interface CounterState {
  data: [] | null | any;
  loading: boolean;
  error: string | null;
  cart: any[];
  orderItem: any[];
  totalCartAmount: any;
}

const initialState: CounterState = {
  data: null,
  loading: false,
  error: "",
  cart: [],
  totalCartAmount: 0,
  orderItem: [],
};

export const getDishes = createAsyncThunk("dishes", async () => {
  return fetch(
    "http://smartrestaurantsolutions.com/mobileapi-v2/v3/Tigger.php?funId=81&rest_id=17"
  ).then((res) => res.json());
});

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addToCart: (state, action: PayloadAction<any>) => {
      const newItem = action.payload;

      const existingItemIndex = state.cart.findIndex(
        (item) => item.id === newItem.id
      );

      if (existingItemIndex !== -1) {
        state.cart[existingItemIndex].quantity += newItem.quantity;
        state.cart[existingItemIndex].price = (
          state.cart[existingItemIndex].quantity * newItem.price
        ).toFixed(2);
      } else {
        state.cart.push(newItem);
      }
    },

    increaseQuantity: (state, action: PayloadAction<any>) => {
      const { id, price, quantity } = action.payload;

      const original_price = (price / quantity).toString(); // Convert to string

      const existingItem = state.cart.find((item) => item.id === id);

      if (existingItem) {
        existingItem.quantity += 1;
        existingItem.price = (
          existingItem.quantity * parseFloat(original_price)
        ).toFixed(2);
        state.totalCartAmount = (
          parseFloat(state.totalCartAmount) + parseFloat(original_price)
        ).toFixed(2);
      }
    },

    decreaseQuantity: (state, action: PayloadAction<any>) => {
      const { id, price, quantity } = action.payload;

      const original_price = (price / quantity).toString(); // Convert to string

      const existingItem = state.cart.find((item) => item.id === id);

      if (existingItem && existingItem.quantity > 1) {
        existingItem.quantity -= 1;
        existingItem.price = (
          existingItem.quantity * parseFloat(original_price)
        ).toFixed(2);
        state.totalCartAmount = (
          parseFloat(state.totalCartAmount) - parseFloat(price)
        ).toFixed(2);
      }
    },

    totalCartAmount: (state, action: PayloadAction<any>) => {
      state.totalCartAmount = action.payload;
    },

    resetCart: (state) => {
      state.cart = [];
      state.totalCartAmount = 0;
    },

    storeCartItem: (state, action) => {
      state.orderItem = action.payload;
    },

    removeCartItem: (state, action) => {
      state.cart = state.cart.filter((item) => item.id !== action.payload);
      state.totalCartAmount = 0;
      state.orderItem = [];
    },
  },

  extraReducers: (builder) => {
    builder.addCase(getDishes.pending, (state) => {
      state.loading = true;
    });
    builder.addCase(getDishes.fulfilled, (state, action) => {
      state.loading = false;
      state.error = null;
      state.data = action.payload;
    });
    builder.addCase(getDishes.rejected, (state, action: PayloadAction<any>) => {
      state.loading = false;
      state.error = action.payload;
      state.data = [];
    });
  },
});

// Export the actions generated by createSlice
export const {
  addToCart,
  increaseQuantity,
  decreaseQuantity,
  totalCartAmount,
  resetCart,
  storeCartItem,
  removeCartItem,
} = cartSlice.actions;

export default cartSlice.reducer;
